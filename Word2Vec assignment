{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e702c219-ac86-4342-99ea-3dd26ca5491e",
   "metadata": {},
   "source": [
    "## Word2Vec Assignment"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "278f285a-a07c-45f6-89ca-fe6e9ae2fa6e",
   "metadata": {},
   "source": [
    "You MUST build on top of what we have coded in the class (to prevent anyone from just copying from the internet).\n",
    "\n",
    "1.  Try a real corpus (instead of banana apple, try something real... on the internet....) - not so big!  Just so you have a good taste of real stuff....like 50 documents, each having 50 words...(really up to you)\n",
    "\n",
    "2. Try a window size of 2\n",
    "\n",
    "3. Implement CBOW (instead of skipgrams)\n",
    "\n",
    "4. Compare normal version of skipgrams vs. negative sampling version of skipgrams in terms of time (using real corpus)\n",
    "\n",
    "Point criteria:\n",
    "0: not done/copy directly from your friend (inspired is ok)\n",
    "1: ok\n",
    "2: with comments, and a nice explanation along the notebook (like how Chaky do his tutorial...)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3508cb9-3977-4c50-ac14-d4e2ade8455b",
   "metadata": {},
   "source": [
    "Name: Podchanan Rungthirakul\n",
    "\n",
    "StudentID: st123460"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "371279fa-0ccd-498e-bd6a-21e1ace9b58c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1c13fea6-0204-45aa-bba3-57438192a959",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c01d6b84-9229-4d94-a5ee-59b3967afa22",
   "metadata": {},
   "outputs": [],
   "source": [
    "def epoch_time(start_time, end_time):\n",
    "    elapsed_time = end_time - start_time\n",
    "    elapsed_mins = int(elapsed_time / 60)\n",
    "    elapsed_secs = int(elapsed_time - (elapsed_mins * 60))\n",
    "    return elapsed_mins, elapsed_secs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4e9b67a-747d-4952-bf99-5d5962cf6932",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "581f5ffe-87d9-4f41-ae81-1b16520f28ea",
   "metadata": {},
   "source": [
    "## 1. Load the data\n",
    "\n",
    "I use my interested informations about jazz music as a corpus for the data in here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c87cbde2-194d-4a12-9810-30d6aa1ce746",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'3.4.2'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import spacy\n",
    "spacy.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "79b60eef-e108-4e8a-a2b4-0b52c5e4d3af",
   "metadata": {},
   "outputs": [],
   "source": [
    "nlp = spacy.load(\"en_core_web_sm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9f919282-ff96-47e5-aed3-f758e283d3cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# put the informations of jazz music from Wikipedia in corpus\n",
    "corpus = [\"Jazz is a music genre that originated in the African-American communities of New Orleans, Louisiana, in the late 19th and early 20th centuries, with its roots in blues and ragtime.[1][2][3][4] Since the 1920s Jazz Age, it has been recognized as a major form of musical expression in traditional and popular music. Jazz is characterized by swing and blue notes, complex chords, call and response vocals, polyrhythms and improvisation. Jazz has roots in European harmony and African rhythmic rituals.\",\n",
    "         \"As jazz spread around the world, it drew on national, regional, and local musical cultures, which gave rise to different styles. New Orleans jazz began in the early 1910s, combining earlier brass band marches, French quadrilles, biguine, ragtime and blues with collective polyphonic improvisation. But jazz did not begin as a single musical tradition in New Orleans or elsewhere. In the 1930s, arranged dance-oriented swing big bands, Kansas City jazz (a hard-swinging, bluesy, improvisational style), and gypsy jazz (a style that emphasized musette waltzes) were the prominent styles. Bebop emerged in the 1940s, shifting jazz from danceable popular music toward a more challenging 'musician's music' which was played at faster tempos and used more chord-based improvisation. Cool jazz developed near the end of the 1940s, introducing calmer, smoother sounds and long, linear melodic lines.\",\n",
    "         \"The mid-1950s saw the emergence of hard bop, which introduced influences from rhythm and blues, gospel, and blues to small groups and particularly to saxophone and piano. Modal jazz developed in the late 1950s, using the mode, or musical scale, as the basis of musical structure and improvisation, as did free jazz, which explored playing without regular meter, beat and formal structures. Jazz-rock fusion appeared in the late 1960s and early 1970s, combining jazz improvisation with rock music's rhythms, electric instruments, and highly amplified stage sound. In the early 1980s, a commercial form of jazz fusion called smooth jazz became successful, garnering significant radio airplay. Other styles and genres abound in the 21st century, such as Latin and Afro-Cuban jazz.\",\n",
    "         \"The origin of the word jazz has resulted in considerable research, and its history is well documented. It is believed to be related to jasm, a slang term dating back to 1860 meaning 'pep, energy'. The earliest written record of the word is in a 1912 article in the Los Angeles Times in which a minor league baseball pitcher described a pitch which he called a 'jazz ball' because it wobbles and you simply can't do anything with it.\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4bd3c731-f43f-4a77-b74c-9a4f2425447f",
   "metadata": {},
   "outputs": [],
   "source": [
    "corpus_tokenized = []\n",
    "for i in range(len(corpus)):\n",
    "    corpus_tokenized.append([str(token) for token in nlp([c for c in corpus][i])])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "744ba48e-bf48-4d1e-ba65-c3f46883c4a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['Jazz',\n",
       "  'is',\n",
       "  'a',\n",
       "  'music',\n",
       "  'genre',\n",
       "  'that',\n",
       "  'originated',\n",
       "  'in',\n",
       "  'the',\n",
       "  'African',\n",
       "  '-',\n",
       "  'American',\n",
       "  'communities',\n",
       "  'of',\n",
       "  'New',\n",
       "  'Orleans',\n",
       "  ',',\n",
       "  'Louisiana',\n",
       "  ',',\n",
       "  'in',\n",
       "  'the',\n",
       "  'late',\n",
       "  '19th',\n",
       "  'and',\n",
       "  'early',\n",
       "  '20th',\n",
       "  'centuries',\n",
       "  ',',\n",
       "  'with',\n",
       "  'its',\n",
       "  'roots',\n",
       "  'in',\n",
       "  'blues',\n",
       "  'and',\n",
       "  'ragtime.[1][2][3][4',\n",
       "  ']',\n",
       "  'Since',\n",
       "  'the',\n",
       "  '1920s',\n",
       "  'Jazz',\n",
       "  'Age',\n",
       "  ',',\n",
       "  'it',\n",
       "  'has',\n",
       "  'been',\n",
       "  'recognized',\n",
       "  'as',\n",
       "  'a',\n",
       "  'major',\n",
       "  'form',\n",
       "  'of',\n",
       "  'musical',\n",
       "  'expression',\n",
       "  'in',\n",
       "  'traditional',\n",
       "  'and',\n",
       "  'popular',\n",
       "  'music',\n",
       "  '.',\n",
       "  'Jazz',\n",
       "  'is',\n",
       "  'characterized',\n",
       "  'by',\n",
       "  'swing',\n",
       "  'and',\n",
       "  'blue',\n",
       "  'notes',\n",
       "  ',',\n",
       "  'complex',\n",
       "  'chords',\n",
       "  ',',\n",
       "  'call',\n",
       "  'and',\n",
       "  'response',\n",
       "  'vocals',\n",
       "  ',',\n",
       "  'polyrhythms',\n",
       "  'and',\n",
       "  'improvisation',\n",
       "  '.',\n",
       "  'Jazz',\n",
       "  'has',\n",
       "  'roots',\n",
       "  'in',\n",
       "  'European',\n",
       "  'harmony',\n",
       "  'and',\n",
       "  'African',\n",
       "  'rhythmic',\n",
       "  'rituals',\n",
       "  '.'],\n",
       " ['As',\n",
       "  'jazz',\n",
       "  'spread',\n",
       "  'around',\n",
       "  'the',\n",
       "  'world',\n",
       "  ',',\n",
       "  'it',\n",
       "  'drew',\n",
       "  'on',\n",
       "  'national',\n",
       "  ',',\n",
       "  'regional',\n",
       "  ',',\n",
       "  'and',\n",
       "  'local',\n",
       "  'musical',\n",
       "  'cultures',\n",
       "  ',',\n",
       "  'which',\n",
       "  'gave',\n",
       "  'rise',\n",
       "  'to',\n",
       "  'different',\n",
       "  'styles',\n",
       "  '.',\n",
       "  'New',\n",
       "  'Orleans',\n",
       "  'jazz',\n",
       "  'began',\n",
       "  'in',\n",
       "  'the',\n",
       "  'early',\n",
       "  '1910s',\n",
       "  ',',\n",
       "  'combining',\n",
       "  'earlier',\n",
       "  'brass',\n",
       "  'band',\n",
       "  'marches',\n",
       "  ',',\n",
       "  'French',\n",
       "  'quadrilles',\n",
       "  ',',\n",
       "  'biguine',\n",
       "  ',',\n",
       "  'ragtime',\n",
       "  'and',\n",
       "  'blues',\n",
       "  'with',\n",
       "  'collective',\n",
       "  'polyphonic',\n",
       "  'improvisation',\n",
       "  '.',\n",
       "  'But',\n",
       "  'jazz',\n",
       "  'did',\n",
       "  'not',\n",
       "  'begin',\n",
       "  'as',\n",
       "  'a',\n",
       "  'single',\n",
       "  'musical',\n",
       "  'tradition',\n",
       "  'in',\n",
       "  'New',\n",
       "  'Orleans',\n",
       "  'or',\n",
       "  'elsewhere',\n",
       "  '.',\n",
       "  'In',\n",
       "  'the',\n",
       "  '1930s',\n",
       "  ',',\n",
       "  'arranged',\n",
       "  'dance',\n",
       "  '-',\n",
       "  'oriented',\n",
       "  'swing',\n",
       "  'big',\n",
       "  'bands',\n",
       "  ',',\n",
       "  'Kansas',\n",
       "  'City',\n",
       "  'jazz',\n",
       "  '(',\n",
       "  'a',\n",
       "  'hard',\n",
       "  '-',\n",
       "  'swinging',\n",
       "  ',',\n",
       "  'bluesy',\n",
       "  ',',\n",
       "  'improvisational',\n",
       "  'style',\n",
       "  ')',\n",
       "  ',',\n",
       "  'and',\n",
       "  'gypsy',\n",
       "  'jazz',\n",
       "  '(',\n",
       "  'a',\n",
       "  'style',\n",
       "  'that',\n",
       "  'emphasized',\n",
       "  'musette',\n",
       "  'waltzes',\n",
       "  ')',\n",
       "  'were',\n",
       "  'the',\n",
       "  'prominent',\n",
       "  'styles',\n",
       "  '.',\n",
       "  'Bebop',\n",
       "  'emerged',\n",
       "  'in',\n",
       "  'the',\n",
       "  '1940s',\n",
       "  ',',\n",
       "  'shifting',\n",
       "  'jazz',\n",
       "  'from',\n",
       "  'danceable',\n",
       "  'popular',\n",
       "  'music',\n",
       "  'toward',\n",
       "  'a',\n",
       "  'more',\n",
       "  'challenging',\n",
       "  \"'\",\n",
       "  'musician',\n",
       "  \"'s\",\n",
       "  'music',\n",
       "  \"'\",\n",
       "  'which',\n",
       "  'was',\n",
       "  'played',\n",
       "  'at',\n",
       "  'faster',\n",
       "  'tempos',\n",
       "  'and',\n",
       "  'used',\n",
       "  'more',\n",
       "  'chord',\n",
       "  '-',\n",
       "  'based',\n",
       "  'improvisation',\n",
       "  '.',\n",
       "  'Cool',\n",
       "  'jazz',\n",
       "  'developed',\n",
       "  'near',\n",
       "  'the',\n",
       "  'end',\n",
       "  'of',\n",
       "  'the',\n",
       "  '1940s',\n",
       "  ',',\n",
       "  'introducing',\n",
       "  'calmer',\n",
       "  ',',\n",
       "  'smoother',\n",
       "  'sounds',\n",
       "  'and',\n",
       "  'long',\n",
       "  ',',\n",
       "  'linear',\n",
       "  'melodic',\n",
       "  'lines',\n",
       "  '.'],\n",
       " ['The',\n",
       "  'mid-1950s',\n",
       "  'saw',\n",
       "  'the',\n",
       "  'emergence',\n",
       "  'of',\n",
       "  'hard',\n",
       "  'bop',\n",
       "  ',',\n",
       "  'which',\n",
       "  'introduced',\n",
       "  'influences',\n",
       "  'from',\n",
       "  'rhythm',\n",
       "  'and',\n",
       "  'blues',\n",
       "  ',',\n",
       "  'gospel',\n",
       "  ',',\n",
       "  'and',\n",
       "  'blues',\n",
       "  'to',\n",
       "  'small',\n",
       "  'groups',\n",
       "  'and',\n",
       "  'particularly',\n",
       "  'to',\n",
       "  'saxophone',\n",
       "  'and',\n",
       "  'piano',\n",
       "  '.',\n",
       "  'Modal',\n",
       "  'jazz',\n",
       "  'developed',\n",
       "  'in',\n",
       "  'the',\n",
       "  'late',\n",
       "  '1950s',\n",
       "  ',',\n",
       "  'using',\n",
       "  'the',\n",
       "  'mode',\n",
       "  ',',\n",
       "  'or',\n",
       "  'musical',\n",
       "  'scale',\n",
       "  ',',\n",
       "  'as',\n",
       "  'the',\n",
       "  'basis',\n",
       "  'of',\n",
       "  'musical',\n",
       "  'structure',\n",
       "  'and',\n",
       "  'improvisation',\n",
       "  ',',\n",
       "  'as',\n",
       "  'did',\n",
       "  'free',\n",
       "  'jazz',\n",
       "  ',',\n",
       "  'which',\n",
       "  'explored',\n",
       "  'playing',\n",
       "  'without',\n",
       "  'regular',\n",
       "  'meter',\n",
       "  ',',\n",
       "  'beat',\n",
       "  'and',\n",
       "  'formal',\n",
       "  'structures',\n",
       "  '.',\n",
       "  'Jazz',\n",
       "  '-',\n",
       "  'rock',\n",
       "  'fusion',\n",
       "  'appeared',\n",
       "  'in',\n",
       "  'the',\n",
       "  'late',\n",
       "  '1960s',\n",
       "  'and',\n",
       "  'early',\n",
       "  '1970s',\n",
       "  ',',\n",
       "  'combining',\n",
       "  'jazz',\n",
       "  'improvisation',\n",
       "  'with',\n",
       "  'rock',\n",
       "  'music',\n",
       "  \"'s\",\n",
       "  'rhythms',\n",
       "  ',',\n",
       "  'electric',\n",
       "  'instruments',\n",
       "  ',',\n",
       "  'and',\n",
       "  'highly',\n",
       "  'amplified',\n",
       "  'stage',\n",
       "  'sound',\n",
       "  '.',\n",
       "  'In',\n",
       "  'the',\n",
       "  'early',\n",
       "  '1980s',\n",
       "  ',',\n",
       "  'a',\n",
       "  'commercial',\n",
       "  'form',\n",
       "  'of',\n",
       "  'jazz',\n",
       "  'fusion',\n",
       "  'called',\n",
       "  'smooth',\n",
       "  'jazz',\n",
       "  'became',\n",
       "  'successful',\n",
       "  ',',\n",
       "  'garnering',\n",
       "  'significant',\n",
       "  'radio',\n",
       "  'airplay',\n",
       "  '.',\n",
       "  'Other',\n",
       "  'styles',\n",
       "  'and',\n",
       "  'genres',\n",
       "  'abound',\n",
       "  'in',\n",
       "  'the',\n",
       "  '21st',\n",
       "  'century',\n",
       "  ',',\n",
       "  'such',\n",
       "  'as',\n",
       "  'Latin',\n",
       "  'and',\n",
       "  'Afro',\n",
       "  '-',\n",
       "  'Cuban',\n",
       "  'jazz',\n",
       "  '.'],\n",
       " ['The',\n",
       "  'origin',\n",
       "  'of',\n",
       "  'the',\n",
       "  'word',\n",
       "  'jazz',\n",
       "  'has',\n",
       "  'resulted',\n",
       "  'in',\n",
       "  'considerable',\n",
       "  'research',\n",
       "  ',',\n",
       "  'and',\n",
       "  'its',\n",
       "  'history',\n",
       "  'is',\n",
       "  'well',\n",
       "  'documented',\n",
       "  '.',\n",
       "  'It',\n",
       "  'is',\n",
       "  'believed',\n",
       "  'to',\n",
       "  'be',\n",
       "  'related',\n",
       "  'to',\n",
       "  'jasm',\n",
       "  ',',\n",
       "  'a',\n",
       "  'slang',\n",
       "  'term',\n",
       "  'dating',\n",
       "  'back',\n",
       "  'to',\n",
       "  '1860',\n",
       "  'meaning',\n",
       "  \"'\",\n",
       "  'pep',\n",
       "  ',',\n",
       "  'energy',\n",
       "  \"'\",\n",
       "  '.',\n",
       "  'The',\n",
       "  'earliest',\n",
       "  'written',\n",
       "  'record',\n",
       "  'of',\n",
       "  'the',\n",
       "  'word',\n",
       "  'is',\n",
       "  'in',\n",
       "  'a',\n",
       "  '1912',\n",
       "  'article',\n",
       "  'in',\n",
       "  'the',\n",
       "  'Los',\n",
       "  'Angeles',\n",
       "  'Times',\n",
       "  'in',\n",
       "  'which',\n",
       "  'a',\n",
       "  'minor',\n",
       "  'league',\n",
       "  'baseball',\n",
       "  'pitcher',\n",
       "  'described',\n",
       "  'a',\n",
       "  'pitch',\n",
       "  'which',\n",
       "  'he',\n",
       "  'called',\n",
       "  'a',\n",
       "  \"'\",\n",
       "  'jazz',\n",
       "  'ball',\n",
       "  \"'\",\n",
       "  'because',\n",
       "  'it',\n",
       "  'wobbles',\n",
       "  'and',\n",
       "  'you',\n",
       "  'simply',\n",
       "  'ca',\n",
       "  \"n't\",\n",
       "  'do',\n",
       "  'anything',\n",
       "  'with',\n",
       "  'it',\n",
       "  '.']]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corpus_tokenized"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8a86bd5e-c8f4-4c27-84b3-20b21cb6b8aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2. numericalize\n",
    "\n",
    "#2.1 get all the unique words\n",
    "#we want to flatten this (basically merge all list)\n",
    "flatten = lambda l: [item for sublist in l for item in sublist]\n",
    "vocabs  = list(set(flatten(corpus_tokenized)))  \n",
    "#vocabs is a term defining all unique words your system know"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5306ecf8-bcd0-4055-8cac-4fac2a626bc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2.2 assign id to all these vocabs\n",
    "word2index = {v: idx for idx, v in enumerate(vocabs)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "169c625e-1203-4f9e-8d5b-dc5fc1a13f5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "204"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word2index['jazz']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a7607f28-8b5e-4369-9761-5743a3250e89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "53"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word2index['instruments']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "aa3e40f1-32cf-4654-a26c-e56732b9eded",
   "metadata": {},
   "outputs": [],
   "source": [
    "#add <UNK>, which is a very normal token exists in the world\n",
    "vocabs.append('<UNK>') #chaky, can it be ##UNK, or UNKKKKKK, or anything"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "70e72d92-e51d-4cac-bcac-0db40fcd160e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#now we have a way to know what is the id of <UNK>\n",
    "word2index['<UNK>'] = 0  #I set <UNK> as 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "45a35d57-1033-403b-a178-867b1c5e769a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: '<UNK>',\n",
       " 1: 'Jazz',\n",
       " 2: 'tradition',\n",
       " 3: 'biguine',\n",
       " 4: 'do',\n",
       " 5: 'big',\n",
       " 6: 'or',\n",
       " 7: 'Louisiana',\n",
       " 8: '1860',\n",
       " 9: 'rhythm',\n",
       " 10: '1910s',\n",
       " 11: 'league',\n",
       " 12: 'dance',\n",
       " 13: 'smooth',\n",
       " 14: 'quadrilles',\n",
       " 15: 'As',\n",
       " 16: 'late',\n",
       " 17: 'rituals',\n",
       " 18: 'pitch',\n",
       " 19: 'traditional',\n",
       " 20: 'free',\n",
       " 21: 'styles',\n",
       " 22: 'described',\n",
       " 23: 'cultures',\n",
       " 24: 'bluesy',\n",
       " 25: 'baseball',\n",
       " 26: 'lines',\n",
       " 27: 'harmony',\n",
       " 28: 'introducing',\n",
       " 29: 'pep',\n",
       " 30: 'highly',\n",
       " 31: 'different',\n",
       " 32: 'style',\n",
       " 33: 'musician',\n",
       " 34: 'as',\n",
       " 35: 'meter',\n",
       " 36: 'improvisation',\n",
       " 37: 'genre',\n",
       " 38: 'meaning',\n",
       " 39: 'French',\n",
       " 40: 'that',\n",
       " 41: 'complex',\n",
       " 42: 'chord',\n",
       " 43: 'end',\n",
       " 44: 'saw',\n",
       " 45: 'In',\n",
       " 46: 'without',\n",
       " 47: 'called',\n",
       " 48: 'dating',\n",
       " 49: 'played',\n",
       " 50: 'structure',\n",
       " 51: 'local',\n",
       " 52: 'piano',\n",
       " 53: 'instruments',\n",
       " 54: 'Cool',\n",
       " 55: 'small',\n",
       " 56: 'Other',\n",
       " 57: 'chords',\n",
       " 58: 'simply',\n",
       " 59: 'music',\n",
       " 60: 'musical',\n",
       " 61: 'swing',\n",
       " 62: 'rise',\n",
       " 63: 'Bebop',\n",
       " 64: 'electric',\n",
       " 65: 'elsewhere',\n",
       " 66: 'successful',\n",
       " 67: 'African',\n",
       " 68: 'faster',\n",
       " 69: 'recognized',\n",
       " 70: 'The',\n",
       " 71: 'appeared',\n",
       " 72: 'the',\n",
       " 73: 'emergence',\n",
       " 74: 'arranged',\n",
       " 75: '.',\n",
       " 76: 'sounds',\n",
       " 77: '1960s',\n",
       " 78: 'Angeles',\n",
       " 79: 'wobbles',\n",
       " 80: 'shifting',\n",
       " 81: 'tempos',\n",
       " 82: 'sound',\n",
       " 83: 'energy',\n",
       " 84: 'musette',\n",
       " 85: 'considerable',\n",
       " 86: 'on',\n",
       " 87: 'regional',\n",
       " 88: 'earliest',\n",
       " 89: ',',\n",
       " 90: 'Cuban',\n",
       " 91: 'minor',\n",
       " 92: 'toward',\n",
       " 93: 'stage',\n",
       " 94: 'because',\n",
       " 95: '(',\n",
       " 96: \"'s\",\n",
       " 97: 'ragtime.[1][2][3][4',\n",
       " 98: 'begin',\n",
       " 99: 'its',\n",
       " 100: 'be',\n",
       " 101: \"'\",\n",
       " 102: 'melodic',\n",
       " 103: '19th',\n",
       " 104: 'which',\n",
       " 105: 'fusion',\n",
       " 106: '1930s',\n",
       " 107: 'rhythms',\n",
       " 108: '21st',\n",
       " 109: 'Orleans',\n",
       " 110: 'national',\n",
       " 111: 'such',\n",
       " 112: 'term',\n",
       " 113: 'mode',\n",
       " 114: 'to',\n",
       " 115: 'combining',\n",
       " 116: 'Afro',\n",
       " 117: 'well',\n",
       " 118: 'research',\n",
       " 119: 'response',\n",
       " 120: 'marches',\n",
       " 121: 'believed',\n",
       " 122: '1950s',\n",
       " 123: 'major',\n",
       " 124: 'developed',\n",
       " 125: 'early',\n",
       " 126: 'he',\n",
       " 127: 'influences',\n",
       " 128: 'ca',\n",
       " 129: 'call',\n",
       " 130: 'collective',\n",
       " 131: 'swinging',\n",
       " 132: 'Latin',\n",
       " 133: 'Age',\n",
       " 134: 'world',\n",
       " 135: 'emphasized',\n",
       " 136: 'saxophone',\n",
       " 137: 'playing',\n",
       " 138: 'rock',\n",
       " 139: 'more',\n",
       " 140: 'amplified',\n",
       " 141: 'back',\n",
       " 142: 'centuries',\n",
       " 143: 'regular',\n",
       " 144: 'record',\n",
       " 145: 'spread',\n",
       " 146: 'particularly',\n",
       " 147: '1940s',\n",
       " 148: 'anything',\n",
       " 149: 'linear',\n",
       " 150: 'brass',\n",
       " 151: 'American',\n",
       " 152: 'City',\n",
       " 153: 'explored',\n",
       " 154: 'commercial',\n",
       " 155: 'significant',\n",
       " 156: 'began',\n",
       " 157: 'based',\n",
       " 158: 'Since',\n",
       " 159: 'formal',\n",
       " 160: 'gave',\n",
       " 161: 'bop',\n",
       " 162: '1970s',\n",
       " 163: 'characterized',\n",
       " 164: 'around',\n",
       " 165: 'drew',\n",
       " 166: 'long',\n",
       " 167: 'structures',\n",
       " 168: 'waltzes',\n",
       " 169: 'in',\n",
       " 170: 'jasm',\n",
       " 171: 'used',\n",
       " 172: 'earlier',\n",
       " 173: 'word',\n",
       " 174: 'roots',\n",
       " 175: 'gospel',\n",
       " 176: 'you',\n",
       " 177: 'using',\n",
       " 178: 'not',\n",
       " 179: 'basis',\n",
       " 180: 'at',\n",
       " 181: 'was',\n",
       " 182: 'polyrhythms',\n",
       " 183: '-',\n",
       " 184: 'danceable',\n",
       " 185: 'scale',\n",
       " 186: 'is',\n",
       " 187: 'been',\n",
       " 188: 'smoother',\n",
       " 189: ']',\n",
       " 190: 'improvisational',\n",
       " 191: 'written',\n",
       " 192: 'with',\n",
       " 193: 'and',\n",
       " 194: 'rhythmic',\n",
       " 195: '1920s',\n",
       " 196: 'prominent',\n",
       " 197: 'blue',\n",
       " 198: 'expression',\n",
       " 199: 'popular',\n",
       " 200: 'resulted',\n",
       " 201: 'slang',\n",
       " 202: 'documented',\n",
       " 203: 'hard',\n",
       " 204: 'jazz',\n",
       " 205: 'gypsy',\n",
       " 206: 'European',\n",
       " 207: 'groups',\n",
       " 208: 'ragtime',\n",
       " 209: 'century',\n",
       " 210: 'originated',\n",
       " 211: 'of',\n",
       " 212: 'history',\n",
       " 213: 'calmer',\n",
       " 214: ')',\n",
       " 215: 'became',\n",
       " 216: \"n't\",\n",
       " 217: 'blues',\n",
       " 218: 'mid-1950s',\n",
       " 219: 'introduced',\n",
       " 220: 'were',\n",
       " 221: 'article',\n",
       " 222: '20th',\n",
       " 223: 'It',\n",
       " 224: 'has',\n",
       " 225: 'by',\n",
       " 226: 'did',\n",
       " 227: 'radio',\n",
       " 228: 'Modal',\n",
       " 229: '1912',\n",
       " 230: 'Los',\n",
       " 231: 'a',\n",
       " 232: 'emerged',\n",
       " 233: 'challenging',\n",
       " 234: 'origin',\n",
       " 235: 'pitcher',\n",
       " 236: 'bands',\n",
       " 237: 'near',\n",
       " 238: 'garnering',\n",
       " 239: 'airplay',\n",
       " 240: 'New',\n",
       " 241: 'But',\n",
       " 242: 'Kansas',\n",
       " 243: 'genres',\n",
       " 244: 'form',\n",
       " 245: 'beat',\n",
       " 246: 'polyphonic',\n",
       " 247: 'band',\n",
       " 248: 'related',\n",
       " 249: 'Times',\n",
       " 250: 'ball',\n",
       " 251: 'oriented',\n",
       " 252: 'single',\n",
       " 253: 'from',\n",
       " 254: 'notes',\n",
       " 255: '1980s',\n",
       " 256: 'abound',\n",
       " 257: 'vocals',\n",
       " 258: 'communities'}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create index2word dictionary\n",
    "#2 min    \n",
    "index2word = {v:k for k, v in word2index.items()}\n",
    "\n",
    "index2word"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "68360563-66c4-40ec-a56a-f751caf58a89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['it',\n",
       " 'Jazz',\n",
       " 'tradition',\n",
       " 'biguine',\n",
       " 'do',\n",
       " 'big',\n",
       " 'or',\n",
       " 'Louisiana',\n",
       " '1860',\n",
       " 'rhythm',\n",
       " '1910s',\n",
       " 'league',\n",
       " 'dance',\n",
       " 'smooth',\n",
       " 'quadrilles',\n",
       " 'As',\n",
       " 'late',\n",
       " 'rituals',\n",
       " 'pitch',\n",
       " 'traditional',\n",
       " 'free',\n",
       " 'styles',\n",
       " 'described',\n",
       " 'cultures',\n",
       " 'bluesy',\n",
       " 'baseball',\n",
       " 'lines',\n",
       " 'harmony',\n",
       " 'introducing',\n",
       " 'pep',\n",
       " 'highly',\n",
       " 'different',\n",
       " 'style',\n",
       " 'musician',\n",
       " 'as',\n",
       " 'meter',\n",
       " 'improvisation',\n",
       " 'genre',\n",
       " 'meaning',\n",
       " 'French',\n",
       " 'that',\n",
       " 'complex',\n",
       " 'chord',\n",
       " 'end',\n",
       " 'saw',\n",
       " 'In',\n",
       " 'without',\n",
       " 'called',\n",
       " 'dating',\n",
       " 'played',\n",
       " 'structure',\n",
       " 'local',\n",
       " 'piano',\n",
       " 'instruments',\n",
       " 'Cool',\n",
       " 'small',\n",
       " 'Other',\n",
       " 'chords',\n",
       " 'simply',\n",
       " 'music',\n",
       " 'musical',\n",
       " 'swing',\n",
       " 'rise',\n",
       " 'Bebop',\n",
       " 'electric',\n",
       " 'elsewhere',\n",
       " 'successful',\n",
       " 'African',\n",
       " 'faster',\n",
       " 'recognized',\n",
       " 'The',\n",
       " 'appeared',\n",
       " 'the',\n",
       " 'emergence',\n",
       " 'arranged',\n",
       " '.',\n",
       " 'sounds',\n",
       " '1960s',\n",
       " 'Angeles',\n",
       " 'wobbles',\n",
       " 'shifting',\n",
       " 'tempos',\n",
       " 'sound',\n",
       " 'energy',\n",
       " 'musette',\n",
       " 'considerable',\n",
       " 'on',\n",
       " 'regional',\n",
       " 'earliest',\n",
       " ',',\n",
       " 'Cuban',\n",
       " 'minor',\n",
       " 'toward',\n",
       " 'stage',\n",
       " 'because',\n",
       " '(',\n",
       " \"'s\",\n",
       " 'ragtime.[1][2][3][4',\n",
       " 'begin',\n",
       " 'its',\n",
       " 'be',\n",
       " \"'\",\n",
       " 'melodic',\n",
       " '19th',\n",
       " 'which',\n",
       " 'fusion',\n",
       " '1930s',\n",
       " 'rhythms',\n",
       " '21st',\n",
       " 'Orleans',\n",
       " 'national',\n",
       " 'such',\n",
       " 'term',\n",
       " 'mode',\n",
       " 'to',\n",
       " 'combining',\n",
       " 'Afro',\n",
       " 'well',\n",
       " 'research',\n",
       " 'response',\n",
       " 'marches',\n",
       " 'believed',\n",
       " '1950s',\n",
       " 'major',\n",
       " 'developed',\n",
       " 'early',\n",
       " 'he',\n",
       " 'influences',\n",
       " 'ca',\n",
       " 'call',\n",
       " 'collective',\n",
       " 'swinging',\n",
       " 'Latin',\n",
       " 'Age',\n",
       " 'world',\n",
       " 'emphasized',\n",
       " 'saxophone',\n",
       " 'playing',\n",
       " 'rock',\n",
       " 'more',\n",
       " 'amplified',\n",
       " 'back',\n",
       " 'centuries',\n",
       " 'regular',\n",
       " 'record',\n",
       " 'spread',\n",
       " 'particularly',\n",
       " '1940s',\n",
       " 'anything',\n",
       " 'linear',\n",
       " 'brass',\n",
       " 'American',\n",
       " 'City',\n",
       " 'explored',\n",
       " 'commercial',\n",
       " 'significant',\n",
       " 'began',\n",
       " 'based',\n",
       " 'Since',\n",
       " 'formal',\n",
       " 'gave',\n",
       " 'bop',\n",
       " '1970s',\n",
       " 'characterized',\n",
       " 'around',\n",
       " 'drew',\n",
       " 'long',\n",
       " 'structures',\n",
       " 'waltzes',\n",
       " 'in',\n",
       " 'jasm',\n",
       " 'used',\n",
       " 'earlier',\n",
       " 'word',\n",
       " 'roots',\n",
       " 'gospel',\n",
       " 'you',\n",
       " 'using',\n",
       " 'not',\n",
       " 'basis',\n",
       " 'at',\n",
       " 'was',\n",
       " 'polyrhythms',\n",
       " '-',\n",
       " 'danceable',\n",
       " 'scale',\n",
       " 'is',\n",
       " 'been',\n",
       " 'smoother',\n",
       " ']',\n",
       " 'improvisational',\n",
       " 'written',\n",
       " 'with',\n",
       " 'and',\n",
       " 'rhythmic',\n",
       " '1920s',\n",
       " 'prominent',\n",
       " 'blue',\n",
       " 'expression',\n",
       " 'popular',\n",
       " 'resulted',\n",
       " 'slang',\n",
       " 'documented',\n",
       " 'hard',\n",
       " 'jazz',\n",
       " 'gypsy',\n",
       " 'European',\n",
       " 'groups',\n",
       " 'ragtime',\n",
       " 'century',\n",
       " 'originated',\n",
       " 'of',\n",
       " 'history',\n",
       " 'calmer',\n",
       " ')',\n",
       " 'became',\n",
       " \"n't\",\n",
       " 'blues',\n",
       " 'mid-1950s',\n",
       " 'introduced',\n",
       " 'were',\n",
       " 'article',\n",
       " '20th',\n",
       " 'It',\n",
       " 'has',\n",
       " 'by',\n",
       " 'did',\n",
       " 'radio',\n",
       " 'Modal',\n",
       " '1912',\n",
       " 'Los',\n",
       " 'a',\n",
       " 'emerged',\n",
       " 'challenging',\n",
       " 'origin',\n",
       " 'pitcher',\n",
       " 'bands',\n",
       " 'near',\n",
       " 'garnering',\n",
       " 'airplay',\n",
       " 'New',\n",
       " 'But',\n",
       " 'Kansas',\n",
       " 'genres',\n",
       " 'form',\n",
       " 'beat',\n",
       " 'polyphonic',\n",
       " 'band',\n",
       " 'related',\n",
       " 'Times',\n",
       " 'ball',\n",
       " 'oriented',\n",
       " 'single',\n",
       " 'from',\n",
       " 'notes',\n",
       " '1980s',\n",
       " 'abound',\n",
       " 'vocals',\n",
       " 'communities',\n",
       " '<UNK>']"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocabs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8437181a-c68a-49b7-9979-2ac8bff613ca",
   "metadata": {},
   "source": [
    "## Prepare the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1c284982-6105-4446-8c42-bc07ebd66cea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['a', 'Jazz'],\n",
       " ['a', 'genre'],\n",
       " ['music', 'is'],\n",
       " ['music', 'that'],\n",
       " ['genre', 'a'],\n",
       " ['genre', 'originated'],\n",
       " ['that', 'music'],\n",
       " ['that', 'in'],\n",
       " ['originated', 'genre'],\n",
       " ['originated', 'the'],\n",
       " ['in', 'that'],\n",
       " ['in', 'African'],\n",
       " ['the', 'originated'],\n",
       " ['the', '-'],\n",
       " ['African', 'in'],\n",
       " ['African', 'American'],\n",
       " ['-', 'the'],\n",
       " ['-', 'communities'],\n",
       " ['American', 'African'],\n",
       " ['American', 'of'],\n",
       " ['communities', '-'],\n",
       " ['communities', 'New'],\n",
       " ['of', 'American'],\n",
       " ['of', 'Orleans'],\n",
       " ['New', 'communities'],\n",
       " ['New', ','],\n",
       " ['Orleans', 'of'],\n",
       " ['Orleans', 'Louisiana'],\n",
       " [',', 'New'],\n",
       " [',', ',']]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#use window_size = 2 as the assignment's instruction.\n",
    "\n",
    "skipgrams = []\n",
    "\n",
    "#for each corpus\n",
    "for sent in corpus_tokenized:\n",
    "    for i in range(2, len(sent)-2): #start from 2 to second last\n",
    "        center_word = sent[i]\n",
    "        outside_words = [sent[i-2], sent[i+2]]  #window_size = 2\n",
    "        for o in outside_words:\n",
    "            skipgrams.append([center_word, o])\n",
    "\n",
    "skipgrams[:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "817a007c-122b-4b1e-b8fa-22ffc0a74075",
   "metadata": {},
   "outputs": [],
   "source": [
    "#let's make what we have made into a function (batch function)\n",
    "#return a batches of data, e.g., =2 --> ['banana', 'apple'], ['banana', 'fruit']\n",
    "#also i want these batches to be id, NOT token   --> [5, 4]\n",
    "\n",
    "def random_batch(batch_size, corpus):\n",
    "    \n",
    "    skipgrams = []\n",
    "\n",
    "    #for each corpus\n",
    "    for sent in corpus_tokenized:\n",
    "        #for each sent \n",
    "        for i in range(2, len(sent) - 2): #start from 2 to the third last\n",
    "            center_word = word2index[sent[i]]\n",
    "            outside_words = [word2index[sent[i-2]], word2index[sent[i+2]]]  #window_size = 2\n",
    "            for o in outside_words:\n",
    "                skipgrams.append([center_word, o])\n",
    "                \n",
    "    #only get a batch, not the entire list\n",
    "    random_index = np.random.choice(range(len(skipgrams)), batch_size, replace=False)\n",
    "             \n",
    "    #appending some list of inputs and labels\n",
    "    random_inputs, random_labels = [], []   \n",
    "    for index in random_index:\n",
    "        random_inputs.append([skipgrams[index][0]])  #center words, this will be a shape of (1, ) --> (1, 1) for modeling\n",
    "        random_labels.append([skipgrams[index][1]])\n",
    "        \n",
    "    return np.array(random_inputs), np.array(random_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b908f760-93dc-482d-84e9-b9183cfaa3b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10, 1)\n",
      "label=array([[ 59],\n",
      "       [186],\n",
      "       [174],\n",
      "       [ 18],\n",
      "       [ 92],\n",
      "       [ 89],\n",
      "       [ 80],\n",
      "       [238],\n",
      "       [ 23],\n",
      "       [ 96]])\n"
     ]
    }
   ],
   "source": [
    "input, label = random_batch(10, corpus_tokenized)\n",
    "\n",
    "print(f\"{input.shape}\")\n",
    "print(f\"{label=}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3adcd33d-597c-47b2-aea1-6c304060b21d",
   "metadata": {},
   "source": [
    "## Unigram distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "378a3eb2-7129-4be9-acd8-0216dc9deb5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "\n",
    "word_count = Counter(flatten(corpus_tokenized))\n",
    "# word_count # Showing word count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5b097d1d-dad9-4500-920b-1c5cb4c4f40d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "496"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_total_words = sum([c for w, c in word_count.items()])\n",
    "num_total_words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "265b4424-a2a1-439d-933b-98acc35725b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "z = 0.001  #scaling up low frequency terms\n",
    "unigram_table = []\n",
    "\n",
    "# create loop for the P(w) formula\n",
    "for v in vocabs:\n",
    "    uw = word_count[v]/num_total_words\n",
    "    uw_alpha = uw ** (3/4)\n",
    "    uw_alpha_dividebyz = int(uw_alpha / z)\n",
    "    unigram_table.extend([v] * uw_alpha_dividebyz)\n",
    "    \n",
    "# Counter(unigram_table)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7074cd7-d4a8-4d87-9567-968e6d0c5bbb",
   "metadata": {},
   "source": [
    "## 4. Negative sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2fb9f05e-2453-4ce0-85e2-44ebdcf3ec7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_sequence(seq, word2index):\n",
    "    idxs = list(map(lambda w: word2index[w] if word2index.get(w) is not None else word2index[\"<UNK>\"], seq))\n",
    "    return torch.LongTensor(idxs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f15dc315-7da2-4a0f-a837-a1e5191be6b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "def negative_sampling(targets, unigram_table, k):\n",
    "    \n",
    "    batch_size = targets.shape[0]\n",
    "    neg_samples = []\n",
    "    \n",
    "    for i in range(batch_size):\n",
    "        #randomly pick k negative words from unigram_table\n",
    "        target_index = targets[i].item()  #looping each of the batch....\n",
    "        nsample = []\n",
    "        while len(nsample) < k:\n",
    "            neg = random.choice(unigram_table)\n",
    "            #if this word == target, skip this word\n",
    "            if word2index[neg] == target_index:\n",
    "                continue\n",
    "            nsample.append(neg)\n",
    "        #append this word to some list\n",
    "        neg_samples.append(prepare_sequence(nsample, word2index).reshape(1, -1))  #tensor[], tensor[]\n",
    "    return torch.cat(neg_samples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e555fde6-dcee-45ff-83be-00d23f13ee77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[ 60],\n",
       "        [126]]),\n",
       " array([[244],\n",
       "        [231]]))"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batch_size = 2\n",
    "input_batch, label_batch = random_batch(batch_size, corpus_tokenized)\n",
    "\n",
    "input_batch, label_batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "42140165-ad66-4045-8b11-db3582ec66a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert to Tensor\n",
    "\n",
    "input_batch = torch.LongTensor(input_batch)\n",
    "label_batch = torch.LongTensor(label_batch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "956cce9f-ed10-4527-bad5-8832d3e9fd9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_neg = 5 \n",
    "neg_samples = negative_sampling(label_batch, unigram_table, num_neg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "590a783e-66e4-4c8f-91c7-619a54dc6a93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([2, 5])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_samples.shape # shape is (batch_size, num_neg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16c74a46-7732-41ac-9163-9dea8019a5af",
   "metadata": {},
   "source": [
    "## 5. Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "433ca860-b78e-436a-8ebb-3e1f20b7a208",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SkipgramNeg(nn.Module):\n",
    "    \n",
    "    def __init__(self, voc_size, emb_size):\n",
    "        super(SkipgramNeg, self).__init__()\n",
    "        self.embedding_center_word  = nn.Embedding(voc_size, emb_size)\n",
    "        self.embedding_outside_word = nn.Embedding(voc_size, emb_size)\n",
    "        self.logsigmoid = nn.LogSigmoid()\n",
    "        \n",
    "    def forward(self, centre_words, outside_words, negative_words):\n",
    "        #center_words, outside_words: (batch_size, 1)\n",
    "        #negative_words:  (batch_size, k)\n",
    "        \n",
    "        center_embbed  = self.embedding_center_word(centre_words)    #(batch_size, 1, emb_size)\n",
    "        outside_embbed = self.embedding_outside_word(outside_words)  #(batch_size, 1, emb_size)\n",
    "        neg_embbed     = self.embedding_outside_word(negative_words) #(batch_size, k, emb_size)\n",
    "        \n",
    "        uovc          =  outside_embbed.bmm(center_embbed.transpose(1, 2)).squeeze(2)  #(batch_size, 1)\n",
    "        ukvc          = -neg_embbed.bmm(center_embbed.transpose(1, 2)).squeeze(2)  #(batch_size, k)\n",
    "        ukvc_sum      =  torch.sum(ukvc, 1).view(-1, 1) #(batch_size, 1)\n",
    "        \n",
    "        loss = self.logsigmoid(uovc) + self.logsigmoid(ukvc_sum)  #(batch_size, 1) + (batch_size, 1)\n",
    "                \n",
    "        return -torch.mean(loss)  \n",
    "#scalar, loss should be scalar, to call backward()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "514aa4ac-f691-43d7-8efb-8f25d0373c51",
   "metadata": {},
   "outputs": [],
   "source": [
    "input, label = random_batch(batch_size, corpus_tokenized)\n",
    "input_tensor = torch.LongTensor(input)  \n",
    "label_tensor = torch.LongTensor(label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "dd75b1c9-4e11-46fd-a02c-294cc3adcc64",
   "metadata": {},
   "outputs": [],
   "source": [
    "emb_size = 20 \n",
    "voc_size = len(vocabs)\n",
    "model = SkipgramNeg(voc_size, emb_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "0952176c-3380-4e8e-bf0b-2f16104fce06",
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tensor = negative_sampling(label_tensor, unigram_table, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "6d0d0e68-5400-4008-ad7c-40dbc2fe4824",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[219, 109, 104, 195, 211],\n",
       "        [219,  27, 217, 181, 129]])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ac25dc18-1e28-419c-be71-f2f2ecb3abec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([2, 1]), torch.Size([2, 1]))"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_tensor.shape, label_tensor.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d4e12ad3-ca64-490d-90e6-661ec57319c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(8.3403, grad_fn=<NegBackward0>)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = model(input_tensor, label_tensor, neg_tensor)\n",
    "loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eea57919-f10e-4951-a0fb-ef73a4afa826",
   "metadata": {},
   "source": [
    "## 6. Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e3c0f437-de6c-4105-bccf-ff121dea89c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "voc_size   = len(vocabs)\n",
    "batch_size = 2\n",
    "emb_size   = 20\n",
    "model      = SkipgramNeg(voc_size, emb_size)\n",
    "\n",
    "optimizer  = optim.Adam(model.parameters(), lr=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "fc1edbc6-742f-4c2c-8692-8d8d36e9836e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1000 | Loss: -0.000000 | Time: 0mins 0secs\n",
      "Epoch 2000 | Loss: 0.417835 | Time: 0mins 0secs\n",
      "Epoch 3000 | Loss: -0.000000 | Time: 0mins 0secs\n",
      "Epoch 4000 | Loss: -0.000000 | Time: 0mins 0secs\n",
      "Epoch 5000 | Loss: -0.000000 | Time: 0mins 0secs\n",
      "Epoch 6000 | Loss: -0.000000 | Time: 0mins 0secs\n",
      "Process Time: 0mins 13secs\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 6000\n",
    "start0 = time.time()\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "\n",
    "    #get random batch\n",
    "    start = time.time()\n",
    "    input_batch, label_batch = random_batch(batch_size, corpus_tokenized)\n",
    "    input_batch = torch.LongTensor(input_batch)\n",
    "    label_batch = torch.LongTensor(label_batch)\n",
    "    neg_batch   = negative_sampling(label_batch, unigram_table, 5)    \n",
    "    \n",
    "    #loss = model\n",
    "    loss = model(input_batch, label_batch, neg_batch)\n",
    "    end = time.time()\n",
    "    epoch_mins, epoch_secs = epoch_time(start, end)\n",
    "    \n",
    "    #backpropagate\n",
    "    loss.backward()\n",
    "    \n",
    "    #update alpha\n",
    "    optimizer.step()\n",
    "    \n",
    "    #print epoch loss\n",
    "    if (epoch + 1) % 1000 == 0:\n",
    "        print(f\"Epoch {epoch+1} | Loss: {loss:.6f} | Time: {epoch_mins}mins {epoch_secs}secs\")\n",
    "end0 = time.time()\n",
    "mins, secs = epoch_time(start0, end0)\n",
    "print(f\"Process Time: {mins}mins {secs}secs\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa39269b-d3b3-4af5-90ed-6abaa1544017",
   "metadata": {},
   "source": [
    "## 7. Plot the embeddings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "223716df-24cc-487f-b4d8-6665e7e4cc1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([204])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jazz = torch.LongTensor([word2index['jazz']])\n",
    "jazz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "de35d922-c0ed-40a2-a9cc-ba3576998f8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([53])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "instruments = torch.LongTensor([word2index['instruments']])\n",
    "instruments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "ffd92052-299e-45e4-8681-508e1f0d9f8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.3223,  1.0966, -1.9764,  2.4778, 12.6112, -7.2821,  1.2553,  1.2708,\n",
       "         -2.5595,  1.2265,  1.6928,  6.3198,  2.5363,  9.4691,  8.1073, -6.0183,\n",
       "         -0.1430,  7.5450,  2.2697, -2.1826]], grad_fn=<DivBackward0>)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jazz_center_embbed = model.embedding_center_word(jazz)\n",
    "jazz_outside_embbed = model.embedding_outside_word(jazz)\n",
    "jazz_embbed = (jazz_center_embbed + jazz_outside_embbed) / 2\n",
    "jazz_embbed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "673eb362-ce83-4e98-b170-46d289437707",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_embbed(word):\n",
    "    try:\n",
    "        index = word2index[word]\n",
    "    except:\n",
    "        index = word2index['<UNK>']\n",
    "    \n",
    "    word = torch.LongTensor([index])\n",
    "\n",
    "    center_embbed  = model.embedding_center_word(word)\n",
    "    outside_embbed = model.embedding_outside_word(word)\n",
    "    \n",
    "    embbed = (center_embbed + outside_embbed) / 2\n",
    "    \n",
    "    return  embbed[0][0].item(), embbed[0][1].item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "ae29d034-9ea0-48ca-ab7c-5366432f0364",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0.32233959436416626, 1.0966049432754517)\n"
     ]
    }
   ],
   "source": [
    "print(get_embbed('jazz'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "d1cb9376-5b49-4a8e-b273-f77056eb144f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,3))\n",
    "for i, word in enumerate(vocabs[:20]): #loop each unique vocab\n",
    "    x, y = get_embbed(word)\n",
    "    plt.scatter(x, y)\n",
    "    plt.annotate(word, xy=(x, y), xytext=(5, 2), textcoords='offset points')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc6a9424-e542-441d-a78d-f06c4c1fa00c",
   "metadata": {},
   "source": [
    "## Try CBOW"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "ff285977-0147-4bec-97c2-5e5797938f47",
   "metadata": {},
   "outputs": [],
   "source": [
    "#delete duplicate word define as vocabs, also include unknow as <UNK>.\n",
    "flatten = lambda l: [item for sublist in l for item in sublist]\n",
    "vocabs  = list(set(flatten(corpus_tokenized)))\n",
    "vocabs.append('<UNK>') # to let '<UNK>' become the last."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "b976be00-1b73-4d46-bae7-562c3a9149e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "205"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word2index = {v: idx+1 for idx, v in enumerate(vocabs)} #plus one to shift value in word index to assign <UNK>'s value to 0 without duplication with others.\n",
    "word2index['<UNK>'] = 0\n",
    "\n",
    "#Let check word to index's value\n",
    "word2index[\"jazz\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "d774c2bc-5e11-4a8a-b960-b02a889f0c00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'African'"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create index to word\n",
    "index2word = {v:k for k, v in word2index.items()}\n",
    "\n",
    "index2word[68]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "559b0f14-1745-4e2a-b68a-44ea607457d1",
   "metadata": {},
   "source": [
    "## Prepare the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "7b3fd8da-d2af-47b8-ba93-89024ba6811d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['a', 'do'],\n",
       " ['a', '.'],\n",
       " ['music', 'do'],\n",
       " ['music', '.'],\n",
       " ['genre', 'do'],\n",
       " ['genre', '.'],\n",
       " ['that', 'do'],\n",
       " ['that', '.'],\n",
       " ['originated', 'do'],\n",
       " ['originated', '.'],\n",
       " ['in', 'do'],\n",
       " ['in', '.'],\n",
       " ['the', 'do'],\n",
       " ['the', '.'],\n",
       " ['African', 'do'],\n",
       " ['African', '.'],\n",
       " ['-', 'do'],\n",
       " ['-', '.'],\n",
       " ['American', 'do'],\n",
       " ['American', '.'],\n",
       " ['communities', 'do'],\n",
       " ['communities', '.'],\n",
       " ['of', 'do'],\n",
       " ['of', '.'],\n",
       " ['New', 'do'],\n",
       " ['New', '.'],\n",
       " ['Orleans', 'do'],\n",
       " ['Orleans', '.'],\n",
       " [',', 'do'],\n",
       " [',', '.']]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cbow = []\n",
    "\n",
    "#for each corpus\n",
    "for sent in corpus_tokenized:\n",
    "    #for each sent \n",
    "    for i in range(2, len(sent) - 2): # start from 1 to second last but we use window size of 2, then first centre word should be at index 2\n",
    "        center_word = sent[i]\n",
    "        ooutside_words = [sent[i-2], sent[i+2]]  #window_size = 2\n",
    "        for o in outside_words:\n",
    "            cbow.append([center_word, o])\n",
    "\n",
    "cbow[:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "31a1c63b-3c1a-4f5a-b67e-0022b86d1f64",
   "metadata": {},
   "outputs": [],
   "source": [
    "def random_batch(batch_size, corpus):\n",
    "    \n",
    "    cbow = []\n",
    "\n",
    "    #for each corpus\n",
    "    for sent in corpus_tokenized:\n",
    "        #for each sent \n",
    "        for i in range(2, len(sent) - 2): #start from 2 to the third last\n",
    "            center_word = word2index[sent[i]]\n",
    "            outside_words = [word2index[sent[i-2]], word2index[sent[i+2]]]  #window_size = 2\n",
    "            for o in outside_words:\n",
    "                cbow.append([center_word, o])\n",
    "                \n",
    "    #only get a batch, not the entire list\n",
    "    random_index = np.random.choice(range(len(skipgrams)), batch_size, replace=False)\n",
    "             \n",
    "    #appending some list of inputs and labels\n",
    "    random_inputs, random_labels = [], []   \n",
    "    for index in random_index:\n",
    "        random_inputs.append([cbow[index][0]])  \n",
    "        random_labels.append([cbow[index][1]])\n",
    "        \n",
    "    return np.array(random_inputs), np.array(random_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "233d4ea0-3852-4ab1-9085-61b9e8efb4fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10, 1)\n",
      "label=array([[139],\n",
      "       [ 69],\n",
      "       [ 37],\n",
      "       [ 92],\n",
      "       [  7],\n",
      "       [232],\n",
      "       [ 90],\n",
      "       [ 73],\n",
      "       [221],\n",
      "       [ 85]])\n"
     ]
    }
   ],
   "source": [
    "input, label = random_batch(10, corpus_tokenized)\n",
    "\n",
    "print(f\"{input.shape}\")\n",
    "print(f\"{label=}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd3ef726-fa46-4fd0-95e5-e714bc6b1623",
   "metadata": {},
   "source": [
    "## Unigram distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "639e925f-e55b-4def-8795-653eb748ddd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "\n",
    "word_count = Counter(flatten(corpus_tokenized))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "ebb7be50-8a40-48ab-8e47-cf8920ab516a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "496"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_total_words = sum([c for w, c in word_count.items()])\n",
    "num_total_words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "df391a31-805d-4f57-9cb4-733a4b79a2be",
   "metadata": {},
   "outputs": [],
   "source": [
    "z = 0.001  #scaling up low frequency terms\n",
    "unigram_table = []\n",
    "\n",
    "# create loop for the P(w) formula\n",
    "for v in vocabs:\n",
    "    uw = word_count[v]/num_total_words\n",
    "    uw_alpha = uw ** (3/4)\n",
    "    uw_alpha_dividebyz = int(uw_alpha / z)\n",
    "    unigram_table.extend([v] * uw_alpha_dividebyz)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a612a706-ff7d-40a7-9fde-9ba7c970f33e",
   "metadata": {},
   "source": [
    "## Negative sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "eb1a6669-0c66-4ae3-a127-867e83554174",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_sequence(seq, word2index):\n",
    "    idxs = list(map(lambda w: word2index[w] if word2index.get(w) is not None else word2index[\"<UNK>\"], seq))\n",
    "    return torch.LongTensor(idxs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "4f421c88-0742-400e-a73b-c4bd72538bf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "def negative_sampling(targets, unigram_table, k):\n",
    "    \n",
    "    batch_size = targets.shape[0]\n",
    "    neg_samples = []\n",
    "    \n",
    "    for i in range(batch_size):\n",
    "        #randomly pick k negative words from unigram_table\n",
    "        target_index = targets[i].item()  #looping each of the batch....\n",
    "        nsample = []\n",
    "        while len(nsample) < k:\n",
    "            neg = random.choice(unigram_table)\n",
    "            #if this word == target, skip this word\n",
    "            if word2index[neg] == target_index:\n",
    "                continue\n",
    "            nsample.append(neg)\n",
    "        #append this word to some list\n",
    "        neg_samples.append(prepare_sequence(nsample, word2index).reshape(1, -1))  #tensor[], tensor[]\n",
    "    return torch.cat(neg_samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b013face-fc57-463b-a4e5-95d8234b0a28",
   "metadata": {},
   "source": [
    "Skipgram and CBOW have different prediction methods\n",
    "then it has to flip labels and inputs for CBOW."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "cd371d58-1481-4af0-a4e9-edf2ee93a0d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[200],\n",
       "        [ 73]]),\n",
       " array([[ 93],\n",
       "        [222]]))"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batch_size = 2\n",
    "label_batch, input_batch = random_batch(batch_size, corpus_tokenized)\n",
    "\n",
    "input_batch, label_batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "a881ce9b-0bb7-47e4-a80a-5e0ed768d7eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert to Tensor\n",
    "\n",
    "input_batch = torch.LongTensor(input_batch)\n",
    "label_batch = torch.LongTensor(label_batch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "5e3d2c6d-6c13-466f-b145-8f8439977783",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_neg = 5  # same as the first part\n",
    "neg_samples = negative_sampling(label_batch, unigram_table, num_neg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "95a58168-a389-409b-8b0d-9634f18ef81c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([2, 5])"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_samples.shape # shape is (batch_size, num_neg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3198b611-aea9-4b8c-83a5-f4280c319c12",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "5f3a1a9c-3f85-4f1b-98a0-6bb04ea780e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# I took this from https://github.com/jeffchy/pytorch-word-embedding/blob/master/CBOW.py\n",
    "\n",
    "class cbow(nn.Module):\n",
    "    \n",
    "    def __init__(self, voc_size, emb_size):\n",
    "        super(cbow, self).__init__()\n",
    "        self.embedding_center_word  = nn.Embedding(voc_size, emb_size)\n",
    "        self.embedding_outside_word = nn.Embedding(voc_size, emb_size)\n",
    "        self.logsigmoid = nn.LogSigmoid()\n",
    "        \n",
    "    def forward(self, center_words, outside_words, negative_words):\n",
    "        \n",
    "        center_embed  = self.embedding_center_word(center_words)    #(batch_size, 1, emb_size)\n",
    "        outside_embed = self.embedding_outside_word(outside_words)  #(batch_size, 1, emb_size)\n",
    "        neg_embed     = self.embedding_outside_word(negative_words) #(batch_size, k, emb_size)\n",
    "        \n",
    "        uovc          =  outside_embed.bmm(center_embed.transpose(1, 2)).squeeze(2)  #(batch_size, 1)\n",
    "        ukvc          = -neg_embed.bmm(center_embed.transpose(1, 2)).squeeze(2)  #(batch_size, k)\n",
    "        ukvc_sum      =  torch.sum(ukvc, 1).view(-1, 1) #(batch_size, 1)\n",
    "        \n",
    "        loss = self.logsigmoid(uovc) + self.logsigmoid(ukvc_sum)  #(batch_size, 1) + (batch_size, 1)\n",
    "                \n",
    "        return -torch.mean(loss)  #scalar, loss should be scalar, to call backward()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "86fbc226-7512-4429-8241-bada6a159c53",
   "metadata": {},
   "outputs": [],
   "source": [
    "label, input = random_batch(batch_size, corpus_tokenized)\n",
    "input_tensor = torch.LongTensor(input)  \n",
    "label_tensor = torch.LongTensor(label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "ae6fa688-3e89-4f76-8373-77a3b864e57b",
   "metadata": {},
   "outputs": [],
   "source": [
    "emb_size = 20 # I will try on 10.\n",
    "voc_size = len(vocabs)\n",
    "model = cbow(voc_size, emb_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "3eead5e3-9a8b-4f30-a486-7de1e6754f47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emb_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "51756e65-75b0-406c-9582-af5a7f2a1279",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "260"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "voc_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "dba4dfab-8e6c-4cee-b744-f013fce7356c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cbow(\n",
       "  (embedding_center_word): Embedding(260, 20)\n",
       "  (embedding_outside_word): Embedding(260, 20)\n",
       "  (logsigmoid): LogSigmoid()\n",
       ")"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "a446cb7e-80f6-47f7-bef1-876a9e607c62",
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tensor = negative_sampling(label_tensor, unigram_table, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "a7be2f30-e199-427f-871e-2c976764c77d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([2, 1]), torch.Size([2, 1]))"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_tensor.shape, label_tensor.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "3d7db951-28f8-48d7-b1b4-61fa32660f77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(1.6110, grad_fn=<NegBackward0>)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = model(input_tensor, label_tensor, neg_tensor)\n",
    "loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "680499e5-8f01-4a7e-8eeb-fa884b0df4c5",
   "metadata": {},
   "source": [
    "## Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "ae69955a-3ec3-4358-9805-ef9e62679619",
   "metadata": {},
   "outputs": [],
   "source": [
    "voc_size   = len(vocabs)\n",
    "batch_size = 2\n",
    "emb_size   = 20\n",
    "model      = cbow(voc_size, emb_size)\n",
    "\n",
    "optimizer  = optim.Adam(model.parameters(), lr=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "a31d37b1-67f8-4196-85b4-dc0d92607d61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1000 | Loss: 4.111963 | Time: 0mins 0secs\n",
      "Epoch 2000 | Loss: 6.369869 | Time: 0mins 0secs\n",
      "Epoch 3000 | Loss: 5.101603 | Time: 0mins 0secs\n",
      "Epoch 4000 | Loss: 6.399364 | Time: 0mins 0secs\n",
      "Epoch 5000 | Loss: 1.377746 | Time: 0mins 0secs\n",
      "Epoch 6000 | Loss: 5.358601 | Time: 0mins 0secs\n",
      "Process Time: 0mins 13secs\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 6000\n",
    "start0 = time.time()\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    start = time.time()\n",
    "\n",
    "    #get random batch\n",
    "    input_batch, label_batch = random_batch(batch_size, corpus_tokenized)\n",
    "    input_batch = torch.LongTensor(input_batch)\n",
    "    label_batch = torch.LongTensor(label_batch)\n",
    "    neg_batch   = negative_sampling(label_batch, unigram_table, 5)    \n",
    "    \n",
    "    #loss = model\n",
    "    loss = model(input_batch, label_batch, neg_batch)\n",
    "    end = time.time()\n",
    "    epoch_mins, epoch_secs = epoch_time(start, end)\n",
    "    \n",
    "    #backpropagate\n",
    "    loss.backward()\n",
    "    \n",
    "    #update alpha\n",
    "    optimizer.step()\n",
    "    \n",
    "    #print epoch loss\n",
    "    if (epoch + 1) % 1000 == 0:\n",
    "        print(f\"Epoch {epoch+1} | Loss: {loss:.6f} | Time: {epoch_mins}mins {epoch_secs}secs\")\n",
    "end0 = time.time()\n",
    "mins, secs = epoch_time(start0, end0)\n",
    "print(f\"Process Time: {mins}mins {secs}secs\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c921f25-43dd-4501-afe7-512b36b41382",
   "metadata": {},
   "source": [
    "## Plot the embeddings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "ec280945-82cb-4a68-80cc-9ffe6c7cf50e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([205])"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jazz = torch.LongTensor([word2index['jazz']])\n",
    "jazz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "279d4fb0-756f-4353-9958-1ef0ae78a745",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-4.5448e-01,  2.2758e-01, -6.9176e-01,  1.1438e+00,  7.2603e-01,\n",
       "         -7.2409e-01,  3.1706e-02,  5.4285e-01, -2.7305e-01, -1.8061e+00,\n",
       "         -1.0802e+00, -4.8101e-04, -4.6763e-01, -3.6018e-01,  1.6936e+00,\n",
       "         -4.6324e-01, -2.0390e-01, -1.0038e+00,  1.1910e+00, -2.4377e-02]],\n",
       "       grad_fn=<DivBackward0>)"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jazz_center_embed = model.embedding_center_word(jazz)\n",
    "jazz_outside_embed = model.embedding_outside_word(jazz)\n",
    "\n",
    "jazz_embed = (jazz_center_embed + jazz_outside_embed) / 2\n",
    "jazz_embed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "7e039e1d-20c6-40d4-ac2c-ea598b8e650d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_embed(word):\n",
    "    try:\n",
    "        index = word2index[word]\n",
    "    except:\n",
    "        index = word2index['<UNK>']\n",
    "    \n",
    "    word = torch.LongTensor([index])\n",
    "\n",
    "    center_embed  = model.embedding_center_word(word)\n",
    "    outside_embed = model.embedding_outside_word(word)\n",
    "    \n",
    "    embed = (center_embed + outside_embed) / 2\n",
    "    \n",
    "    return  embed[0][0].item(), embed[0][1].item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "6a474693-0d71-4064-b26f-a411f4d9d145",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(-0.4544777274131775, 0.2275848388671875)\n"
     ]
    }
   ],
   "source": [
    "print(get_embed('jazz'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "7da8971b-f31f-407c-9d86-024478db903d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,3))\n",
    "for i, word in enumerate(vocabs[:20]): #loop each unique vocab\n",
    "    x, y = get_embed(word)\n",
    "    plt.scatter(x, y)\n",
    "    plt.annotate(word, xy=(x, y), xytext=(5, 2), textcoords='offset points')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fecf01f2-7a2e-49d3-bdfa-ec6006bde0ea",
   "metadata": {},
   "source": [
    "## Try Normal Skipgram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "f77a238b-84bf-4efb-9dc7-e3812833dc3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "205"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#delete duplicate word define as vocabs, also include unknow as <UNK>.\n",
    "flatten = lambda l: [item for sublist in l for item in sublist]\n",
    "vocabs  = list(set(flatten(corpus_tokenized)))\n",
    "vocabs.append('<UNK>') # to let '<UNK>' become the last.\n",
    "word2index = {v: idx+1 for idx, v in enumerate(vocabs)} #plus one to shift value in word index to assign <UNK>'s value to 0 without duplication with others.\n",
    "word2index['<UNK>'] = 0\n",
    "\n",
    "#Let check word to index's value\n",
    "word2index[\"jazz\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "db458481-af57-4143-b98e-4cc1c18b2d1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'wobbles'"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create index to word\n",
    "index2word = {v:k for k, v in word2index.items()}\n",
    "\n",
    "index2word[80]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "727b4e62-8d34-4b56-a5f5-f934a2fc5e18",
   "metadata": {},
   "outputs": [],
   "source": [
    "skipgrams = []\n",
    "\n",
    "#for each corpus\n",
    "for sent in corpus_tokenized:\n",
    "    \n",
    "    for i in range(2, len(sent) - 2): # start from 1 to second last but we use window size of 2, then first centre word should be at index 2\n",
    "        center_word = sent[i]\n",
    "        outside_words = np.ravel([sent[i - 2:i],sent[i+1: i + 3]])  # window_size = 2\n",
    "        for o in outside_words:\n",
    "            skipgrams.append([center_word, o])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "c8dd80a7-eb61-4da2-b4b9-fb1e9cedcf7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['a', 'Jazz'],\n",
       " ['a', 'is'],\n",
       " ['a', 'music'],\n",
       " ['a', 'genre'],\n",
       " ['music', 'is'],\n",
       " ['music', 'a'],\n",
       " ['music', 'genre'],\n",
       " ['music', 'that'],\n",
       " ['genre', 'a'],\n",
       " ['genre', 'music'],\n",
       " ['genre', 'that'],\n",
       " ['genre', 'originated'],\n",
       " ['that', 'music'],\n",
       " ['that', 'genre'],\n",
       " ['that', 'originated'],\n",
       " ['that', 'in'],\n",
       " ['originated', 'genre'],\n",
       " ['originated', 'that'],\n",
       " ['originated', 'in'],\n",
       " ['originated', 'the'],\n",
       " ['in', 'that'],\n",
       " ['in', 'originated'],\n",
       " ['in', 'the'],\n",
       " ['in', 'African'],\n",
       " ['the', 'originated'],\n",
       " ['the', 'in'],\n",
       " ['the', 'African'],\n",
       " ['the', '-'],\n",
       " ['African', 'in'],\n",
       " ['African', 'the']]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skipgrams[:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "e68bd830-3229-4dc6-bf1d-a1ad66ffb00b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def random_batch(batch_size, corpus):\n",
    "    \n",
    "    skipgrams = []\n",
    "\n",
    "    #for each corpus\n",
    "    for sent in corpus_tokenized:\n",
    "        #for each sent \n",
    "        for i in range(2, len(sent) - 2): #start from 2 to the third last\n",
    "            center_word = word2index[sent[i]]\n",
    "            outside_words = [word2index[sent[i-2]], word2index[sent[i+2]]]  #window_size = 2\n",
    "            for o in outside_words:\n",
    "                skipgrams.append([center_word, o])\n",
    "                \n",
    "    #only get a batch, not the entire list\n",
    "    random_index = np.random.choice(range(len(skipgrams)), batch_size, replace=False)\n",
    "             \n",
    "    #appending some list of inputs and labels\n",
    "    random_inputs, random_labels = [], []   \n",
    "    for index in random_index:\n",
    "        random_inputs.append([skipgrams[index][0]])  \n",
    "        random_labels.append([skipgrams[index][1]])\n",
    "        \n",
    "    return np.array(random_inputs), np.array(random_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "d3e786aa-e07f-45c3-a439-be511492bc77",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Skipgram(nn.Module):\n",
    "    \n",
    "    def __init__(self, voc_size, emb_size):\n",
    "        super(Skipgram, self).__init__()\n",
    "        self.embedding_center_word  = nn.Embedding(voc_size, emb_size)  #is a lookup table mapping all ids in voc_size, into some vector of size emb_size\n",
    "        self.embedding_outside_word = nn.Embedding(voc_size, emb_size)\n",
    "    \n",
    "    def forward(self, center_word, outside_word, all_vocabs):\n",
    "        #center_word, outside_word: (batch_size, 1)\n",
    "        #all_vocabs: (batch_size, voc_size)\n",
    "        \n",
    "        #convert them into embedding\n",
    "        center_word_embed  = self.embedding_center_word(center_word)     #(batch_size, 1, emb_size)\n",
    "        outside_word_embed = self.embedding_outside_word(outside_word)   #(batch_size, 1, emb_size)\n",
    "        all_vocabs_embed   = self.embedding_outside_word(all_vocabs)     #(batch_size, voc_size, emb_size)\n",
    "        \n",
    "        #bmm is basically @ or .dot , but across batches (i.e., ignore the batch dimension)\n",
    "        top_term = outside_word_embed.bmm(center_word_embed.transpose(1, 2)).squeeze(2)\n",
    "        #(batch_size, 1, emb_size) @ (batch_size, emb_size, 1) = (batch_size, 1, 1) ===> (batch_size, 1)\n",
    "        \n",
    "        top_term_exp = torch.exp(top_term)  #exp(uo vc)\n",
    "        #(batch_size, 1)\n",
    "        \n",
    "        lower_term = all_vocabs_embed.bmm(center_word_embed.transpose(1, 2)).squeeze(2)\n",
    "         #(batch_size, voc_size, emb_size) @ (batch_size, emb_size, 1) = (batch_size, voc_size, 1) = (batch_size, voc_size)\n",
    "         \n",
    "        lower_term_sum = torch.sum(torch.exp(lower_term), 1) #sum exp(uw vc)\n",
    "        #(batch_size, 1)\n",
    "        \n",
    "        loss_fn = -torch.mean(torch.log(top_term_exp / lower_term_sum))\n",
    "        #(batch_size, 1) / (batch_size, 1) ==mean==> scalar\n",
    "        \n",
    "        return loss_fn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "66872fc5-1d01-432c-ad0f-d8aae3d8bb3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10, 1)\n",
      "label=array([[  2],\n",
      "       [ 75],\n",
      "       [ 51],\n",
      "       [ 90],\n",
      "       [  5],\n",
      "       [170],\n",
      "       [254],\n",
      "       [129],\n",
      "       [ 90],\n",
      "       [205]])\n"
     ]
    }
   ],
   "source": [
    "input, label = random_batch(10, corpus_tokenized)\n",
    "\n",
    "print(f\"{input.shape}\")\n",
    "print(f\"{label=}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e17ca36a-61c7-40c5-b519-5620ba6528e7",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "d9138230-d09f-4f70-b976-9deb3cb336bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([2, 260])"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batch_size = 2\n",
    "\n",
    "def prepare_sequence(seq, word2index):\n",
    "    #map(function, list of something)\n",
    "    #map will look at each of element in this list, and apply this function\n",
    "    idxs = list(map(lambda w: word2index[w] if word2index.get(w) is not None else word2index[\"<UNK>\"], seq))\n",
    "    return torch.LongTensor(idxs)\n",
    "\n",
    "all_vocabs = prepare_sequence(list(vocabs), word2index).expand(batch_size, voc_size)\n",
    "all_vocabs.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "6d76e82a-d24a-444a-9d3c-94bd39568a4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "input, label = random_batch(batch_size, corpus_tokenized)\n",
    "input_tensor = torch.LongTensor(input)  \n",
    "label_tensor = torch.LongTensor(label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "8f3b1ae2-9419-4a29-99c7-0f7b08a106f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "emb_size = 20\n",
    "voc_size = len(vocabs)\n",
    "model = Skipgram(voc_size, emb_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "afeab875-8507-456b-ba0a-815b2a07a91c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([2, 1])"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_tensor.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "52f63cc0-cba6-4225-9308-322f9460993a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([2, 1])"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label_tensor.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "451118c1-c9c7-4ca2-9745-b86b1d4ea1c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(11.2676, grad_fn=<NegBackward0>)"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = model(input_tensor, label_tensor, all_vocabs)\n",
    "loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb15878f-25cd-4fe9-891e-386296b60580",
   "metadata": {},
   "source": [
    "## Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "50048ce9-d8b8-4269-8e41-b7f46aab65f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "voc_size   = len(vocabs)\n",
    "batch_size = 2\n",
    "emb_size   = 20\n",
    "model      = Skipgram(voc_size, emb_size)\n",
    "optimizer  = optim.Adam(model.parameters(), lr=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "344bcd0b-440b-4dec-a553-5743520bbe42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1000 | Loss: 3.972332 | Time: 0mins 0secs\n",
      "Epoch 2000 | Loss: 8.093463 | Time: 0mins 0secs\n",
      "Epoch 3000 | Loss: 2.263709 | Time: 0mins 0secs\n",
      "Epoch 4000 | Loss: nan | Time: 0mins 0secs\n",
      "Epoch 5000 | Loss: nan | Time: 0mins 0secs\n",
      "Epoch 6000 | Loss: nan | Time: 0mins 0secs\n",
      "Process Time: 0mins 13secs\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 6000\n",
    "start0 = time.time()\n",
    "\n",
    "#for epoch\n",
    "for epoch in range(num_epochs):\n",
    "    start = time.time()\n",
    "    \n",
    "    #get random batch\n",
    "    input_batch, label_batch = random_batch(batch_size, corpus_tokenized)\n",
    "    input_batch = torch.LongTensor(input_batch)\n",
    "    label_batch = torch.LongTensor(label_batch)\n",
    "    \n",
    "    # print(input_batch.shape, label_batch.shape, all_vocabs.shape)\n",
    "    \n",
    "    #loss = model\n",
    "    loss = model(input_batch, label_batch, all_vocabs)\n",
    "    \n",
    "    end = time.time()\n",
    "    \n",
    "    epoch_mins, epoch_secs = epoch_time(start, end)\n",
    "    \n",
    "    #backpropagate\n",
    "    loss.backward()\n",
    "    \n",
    "    #update alpha\n",
    "    optimizer.step()\n",
    "    \n",
    "    #print epoch loss\n",
    "    if (epoch + 1) % 1000 == 0:\n",
    "        print(f\"Epoch {epoch+1} | Loss: {loss:.6f} | Time: {epoch_mins}mins {epoch_secs}secs\")\n",
    "\n",
    "end0 = time.time()\n",
    "mins, secs = epoch_time(start0, end0)\n",
    "print(f\"Process Time: {mins}mins {secs}secs\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee7402a9-f005-493d-9aa4-931ea52819b0",
   "metadata": {},
   "source": [
    "## Plot the embeddings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "d77c914d-4992-4c66-8e23-aa4c4f397f1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([205])"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jazz = torch.LongTensor([word2index['jazz']])\n",
    "jazz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "ce78b38c-f606-476c-8816-04caf27fb74e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]],\n",
       "       grad_fn=<DivBackward0>)"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jazz_center_embed = model.embedding_center_word(jazz)\n",
    "jazz_outside_embed = model.embedding_outside_word(jazz)\n",
    "\n",
    "jazz_embed = (jazz_center_embed + jazz_outside_embed) / 2\n",
    "jazz_embed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "cfb3fe7d-b8ac-45e8-89c4-5fe24c7d9f8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_embed(word):\n",
    "    try:\n",
    "        index = word2index[word]\n",
    "    except:\n",
    "        index = word2index['<UNK>']\n",
    "    \n",
    "    word = torch.LongTensor([index])\n",
    "\n",
    "    center_embed  = model.embedding_center_word(word)\n",
    "    outside_embed = model.embedding_outside_word(word)\n",
    "    \n",
    "    embed = (center_embed + outside_embed) / 2\n",
    "    \n",
    "    return  embed[0][0].item(), embed[0][1].item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "d84db4f3-2a15-4df1-8033-f91c3fb113eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(nan, nan)\n"
     ]
    }
   ],
   "source": [
    "print(get_embed('jazz'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "c5de6d4b-1317-4d9d-ae86-8d8f65ad3a96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,3))\n",
    "for i, word in enumerate(vocabs[:20]): #loop each unique vocab\n",
    "    x, y = get_embed(word)\n",
    "    plt.scatter(x, y)\n",
    "    plt.annotate(word, xy=(x, y), xytext=(5, 2), textcoords='offset points')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cee51b63-6710-4dc5-a42d-31ee92843a85",
   "metadata": {},
   "source": [
    "From results of skipgram and negative samplings, there have 13 secs same as two methods. But I got problems about normal method that cannot reach 4000 epochs like the rest, maybe it has some limitations or my corpus is too small."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a4a106e-06cf-45bc-9520-29ae9c4ee5a8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
